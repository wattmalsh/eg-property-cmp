<apex:page showHeader="false">
  <html>
    <head>
      <style>
        html { height: 100%; }
        body { height: 100%; margin: 0; padding: 0 }
        #map { height: 100%; }
      </style>
    </head>
    <body>
      <div id="map"/>
      <script>

        let lexOrigin = 'https://{!$Currentpage.parameters.lcHost}';

        let mapEl = document.getElementById('map'),
            mapCenter = { lat: 43.646335, lng: -79.530037 }; // arbitrary initial map center in Toronto

        // following are in sync with LC
        let record = {}, // Id,Name,Street,City,State,Country,PostalCode,Latitude,Longitude
            address = '',
            layers = []; // [{ url:'',btnName:'',displayName:'',active:'',ref:''}, {...} ]

        // google map api variables
        let map,
            mapOptions,
            marker,
            markerInfoWindow,
            geocoder,
            layerRefs = {};

        function sendToLC(message) {
          parent.postMessage(message, lexOrigin);
        }

        // handle record response from LC
        window.addEventListener("message", function(e) {

          if (e.origin !== lexOrigin) {
            return;
          }

          let data = JSON.parse(e.data);

          if (data.name === "initResponse") {
            address = data.payload.address;
            // handle lead record
            record = data.payload.record;
            record.Latitude = Number(record.Latitude);
            record.Longitude = Number(record.Longitude);
            map.setCenter({ lat: record.Latitude, lng: record.Longitude});
            initMarker();
          }
          if (data.name === "resetRecord") {
            address = data.payload.address;
            record = data.payload.record;
            record.Latitude = Number(record.Latitude);
            record.Longitude = Number(record.Longitude);
            address = data.payload.address;
            let latLng = { lat: record.Latitude, lng: record.Longitude};
            map.setCenter(latLng);
            marker.setPosition(latLng)
          }
          if (data.name === "toggleLayer") {
            layers = data.payload.layers;
            toggleLayers();
          }

        }, false);

        function initMap() {
          // send to LC, google api loaded and DOMContentLoaded event fired so ready to receive record
          sendToLC("init");

          // load a blank map
          mapOptions = {
            zoom: 20,
            center: mapCenter,
            gestureHandling: 'greedy',
            mapTypeId: google.maps.MapTypeId.HYBRID,
            mapTypeControl: true,
            mapTypeControlOptions: {
              style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
              position: google.maps.ControlPosition.TOP_CENTER
            },
            zoomControl: true,
            zoomControlOptions: {
              position: google.maps.ControlPosition.RIGHT_CENTER
            },
            scaleControl: true,
            streetViewControl: true,
            streetViewControlOptions: {
              position: google.maps.ControlPosition.LEFT_BOTTOM
            },
            fullscreenControl: true
          };
          map = new google.maps.Map(mapEl, mapOptions);
          geocoder = new google.maps.Geocoder;
        }

        function initMarker() {

          marker = new google.maps.Marker({
            position: { lat: record.Latitude, lng: record.Longitude},
            map: map,
            draggable: true,
            title: record.Name
          });

          markerInfoWindow = new google.maps.InfoWindow({
          //TODO: Make address dynamic
            content: `
            <div class="popup">
            <p>${record.Name}</p>
            <p>${address}</p>
            </div>`
          });

          // marker and markerInfoWindow event listeners
          marker.addListener('click', function() {
            markerInfoWindow.open(map, marker);
          });

          marker.addListener('dragstart', function() {
            draggingMarker = true;
          });

          marker.addListener('dragend', function() {
            draggingMarker = false;
            let latLng = marker.getPosition();
            record.Latitude = latLng.lat();
            record.Longitude = latLng.lng();
            geocodeLatLng(latLng, record, function() {
              let message = {
                name: "updateRecord",
                record: record
              };
              sendToLC(message);
            });
          });

          marker.addListener('position_changed', function() {
            if ( draggingMarker ) {
              let latLng = marker.getPosition();
              record.Latitude = latLng.lat();
              record.Longitude = latLng.lng();
              let message = {
                name: "updateRecord",
                record: record
              };
              sendToLC(message);
            }
          });

        }

        // return the closest human-readable address from latLng
        function geocodeLatLng(latLng, record, callback) {
          geocoder.geocode({ location: latLng }, function(results, status) {
            if ( status === 'OK' ) {
              address = results[0].formatted_address;
              let split = address.split(/,/);
              record.Street = split[0];
              record.City = split[1];
              record.State = split[2].split(/ /)[1];
              record.PostalCode = split[2].split(/ /)[2];
              record.Country = split[3];
            } else {
              address = 'Geocoder failed due to: ' + status;
              record.Street = 'null';
              record.City = 'null';
              record.State = 'null'
              record.PostalCode = 'null';
              record.Country = 'null';
            }
            callback();
          });
        }

        function createLayerReference(layer, layerName) {
          layerRefs[layerName] = new google.maps.KmlLayer({
            url: layer.url,
            map: map,
            preserveViewport: true,
            suppressInfoWindows: true
          });
        }

        function toggleLayers() {
          for ( let i=0; i<layers.length; i++ ) {
            let layerName = layers[i].name;
            let display = layers[i].active;
            let exists = layerName in layerRefs;
            if ( display && !exists ) {
              createLayerReference(layers[i], layerName);
            } else if ( display && exists ) {
              layerRefs[layerName].setMap(map);
            } else if ( !display && exists ) {
              layerRefs[layerName].setMap(null)
            }
          }
        }

      </script>
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSlN5huj7fFxFreZkvr6HoWepUgzBcP9g&callback=initMap">
      </script>
    </body>
  </html>
</apex:page>
