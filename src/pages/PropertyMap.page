<apex:page showHeader="false">
  <html>
    <head>
      <style>
        html { height: 100%; }
        body { height: 100%; margin: 0; padding: 0 }
        #map { height: 100%; }
      </style>
    </head>
    <body>
      <div id="map"/>
      <script>

        // let lexOrigin = 'https://{!$Currentpage.parameters.lcHost}'; // the origin (protocol + port + host)
        let lexOrigin = 'https://energygeeks-matt-dev-ed.lightning.force.com'

        let mapEl = document.getElementById('map'),
            mapCenter = { lat: 43.646335, lng: -79.530037 }; // arbitrary initial map center in Toronto

        // following are in sync with LC
        let record = {}, // Id,Name,Street,City,State,Country,PostalCode,Latitude,Longitude
            layers = []; // [{ url:'',btnName:'',displayName:'',active:'',ref:''}, {...} ]

        // google map api variables
        let map,
            mapOptions,
            marker,
            markerInfoWindow,
            geocoder,
            kmlLayers;

        function sendToLC(message) {
          parent.postMessage(message, lexOrigin);
        }

        // handle record response from LC
        window.addEventListener("message", function(e) {

          if (e.origin !== lexOrigin) {
            return;
          }

          let data = JSON.parse(e.data);

          if (data.name === "initResponse") {
            // handle lead record
            record = data.payload.record;
            record.address = `${record.Street} ${record.City}, ${record.State} ${record.Country} ${record.PostalCode}`;
            map.setCenter({ lat: record.Latitude, lng: record.Longitude});
            initMarker();
            // check for lead record / google map discrepancies
            /* if (record.address !== geocodeLatLng(latLng)) { */
              /* //TODO: alert that addresses don't match up and ask user to remedy */
            /* } */
            // handle kml layers
            layers = data.payload.layers;
            createLayerReferences(layers);
            toggleLayers(layers);
          }

          if (data.name === "recordUpdateSuccess") {
            //TODO: use CSS to notify user record successfully updated in database
          }

          if (data.name === "kmlUpdate") {
            /* layers = message.data; */
            /* toggleLayers(layers); */
          }

        }, false);

        function initMap() {
          // send to LC, google api loaded and DOMContentLoaded event fired so ready to receive record
          sendToLC("init");

          // load a blank map
          mapOptions = {
            zoom: 20,
            gestureHandling: 'greedy',
            mapTypeId: google.maps.MapTypeId.HYBRID,
            mapTypeControl: true,
            mapTypeControlOptions: {
              style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
              position: google.maps.ControlPosition.TOP_CENTER
            },
            zoomControl: true,
            zoomControlOptions: {
              position: google.maps.ControlPosition.RIGHT_CENTER
            },
            scaleControl: true,
            streetViewControl: true,
            streetViewControlOptions: {
              position: google.maps.ControlPosition.LEFT_BOTTOM
            },
            fullscreenControl: true
          };
          map = new google.maps.Map(mapEl, mapOptions);
          map.setCenter( mapCenter );

        }

        function initMarker() {

          marker = new google.maps.Marker({
            position: { lat: 43.646335, lng: -79.530037 },
            map: map,
            draggable: true,
            title: record.Name
          });

          markerInfoWindow = new google.maps.InfoWindow({
            content: `
            <div class="popup">
            <p>${record.Name}</p>
            <p>${record.address}</p>
            </div>`
          });

          // marker and markerInfoWindow event listeners
          marker.addListener('click', function() {
            markerInfoWindow.open(map, marker);
          });

          marker.addListener('dragend', function() {
            let latLng = marker.getPosition();
            let address = geocodeLatLng(latLng);
            record.Street = '535 Miramar Ave';
            record.City = 'San Francisco';
            record.State = 'CA';
            record.Country = 'USA';
            record.PostalCode = '94112';
            record.Latitude = latLng.lat;
            record.Longitude = latLng.lng;
            let message = Object.assign({}, record, { name: "marker dragend"})
            sendToLC(message);
          });

          markerInfoWindow.addListener('closeclick', function() {
            map.setCenter(marker.getPosition());
          });

        }

        // return the closest human-readable address from latLng
        function geocodeLatLng(latLng) {
          if ( typeof geocoder === 'undefined' ) {
            geocoder = new google.maps.Geocoder();
          }
          geocoder.geocode({ location: latLng }, function(results, status) {
            if ( status === 'OK' ) {
              return results[0].formatted_address;
            } else {
              const fail = 'Cannot determine an address at this location';
              //TODO: handle geocoder error
            }
          });
        }

        function createLayerReferences(layers) {
          for ( let i=0; i<layers.length; i++ ) {
            layers[i].ref = new google.maps.KmlLayer({
              url: layers[i].url,
              map: map,
              preserveViewport: true,
              suppressInfoWindows: true
            });
          }
        }

        function toggleLayers(layers) {
          for ( let i=0; i<layers.length; i++ ) {
            layers[i].active ? layers[i].ref.setMap(map) : layers[i].ref.setMap(null);
          }
        }

      </script>
      <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBSlN5huj7fFxFreZkvr6HoWepUgzBcP9g&callback=initMap">
      </script>
    </body>
  </html>
</apex:page>
