<project name="Salesforce Sandbox Ant Tasks" default="help" basedir="."
  xmlns:sf="antlib:com.salesforce" >

  <property name="dir.logs" location="logs" />
  <property name="dir.lib" location="lib" />
  <property name="dir.deploy" location="src" />
  <property name="dir.backup" location="backup" />
  <property name="dir.retrieve" location="retrieve" />
  <property name="dir.deploy.staticresources" location="src/staticresources" />
  <property name="dir.undeploy" location="undeploy" />
  <property name="dir.undeploy.backup" location="undeploy/backup" />
  <property name="dir.tmp" location="tmp" />
  <property name="dir.tmp.deploy" location="tmp/deploy" />
  <property name="file.manifest" location="manifest.xml" />
  <property name="file.retrieve.pkg" location="retrieve/package.xml" />
  <property name="file.deploy.pkg" location="src/package.xml" />
  <property name="file.undeploy.pkg" location="undeploy/package.xml" />
  <property name="file.tmp.pkg" location="tmp/package.xml" />
  <property file="build.properties" />
  <property file="default.properties" />
  <property file="library.properties" />
  <property name="lib.sf-ant.jar" location="${dir.lib}/${sf-ant.name}-${sf-ant.version}.jar" />
  <property name="lib.ant-contrib.jar" location="${dir.lib}/${ant-contrib.name}-${ant-contrib.version}.jar" />
  <property name="lib.junit.jar" location="${dir.lib}/${junit.name}-${junit.version}.jar" />
  <property name="lib.hamcrest-core.jar" location="${dir.lib}/${hamcrest-core.name}-${hamcrest-core.version}.jar" />

  <taskdef resource="com/salesforce/antlib.xml" uri="antlib:com.salesforce" >
    <classpath>
      <pathelement location="${lib.sf-ant.jar}" />
    </classpath>
  </taskdef>

  <taskdef resource="net/sf/antcontrib/antcontrib.properties" >
    <classpath>
      <pathelement location="${lib.ant-contrib.jar}" />
    </classpath>
  </taskdef>

  <scriptdef language="javascript" name="lower" >
    <attribute name="string"  />
    <attribute name="to"  />

    project.setProperty( attributes.get( "to" ),
                         attributes.get( "string" ).toLowerCase() );

  </scriptdef>

  <path id="classpath.test" >
    <pathelement location="${lib.junit.jar}" />
    <pathelement location="${lib.hamcrest.jar}" />
    <pathelement location="${lib.main.build.dir}" />
  </path>

  <target name="-init" depends="-setOrg,-setServerurl,-setCredentials,-printproperties" >
    <mkdir dir="${dir.logs}" />
    <tstamp>
      <format property="tstamp" pattern="yyyyMMddhhmm" locale="en,US" />
    </tstamp>
  </target>

  <target name="-setOrg" >
    <propertyregex property="server.org.ucfirst" input="${ant.project.invoked-targets}"
      regexp="(sandbox|production)" select="\0" casesensitive="false" />
    <lower string="${server.org.ucfirst}" to="server.org" />
  </target>

  <target name="-setServerurl" >
    <condition property="server.url" value="${server.url.sandbox}" else="${server.url.production}" >
      <equals arg1="${server.org}" arg2="sandbox" />
    </condition>
  </target>

  <target name="-setCredentials" >
    <condition property="sf.${server.org}.username" value="" > <not><isset property="sf.${server.org}.username" /></not></condition>
    <condition property="sf.${server.org}.password" value="" > <not><isset property="sf.${server.org}.password" /></not></condition>
    <condition property="sf.${server.org}.sessionId" value="" > <not><isset property="sf.${server.org}.sessionId" /></not></condition>
    <condition property="sf.username" value="${sf.sandbox.username}" else="${sf.production.username}" >
      <equals arg1="${server.org}" arg2="sandbox" />
    </condition>
    <condition property="sf.password" value="${sf.sandbox.password}" else="${sf.production.password}" >
      <equals arg1="${server.org}" arg2="sandbox" />
    </condition>
    <condition property="sf.sessionId" value="${sf.sandbox.sessionId}" else="${sf.production.sessionId}" >
      <equals arg1="${server.org}" arg2="sandbox" />
    </condition>
  </target>

  <target name="-setDestructiveChangesXml" >
    <if>
      <available file="undeploy/destructiveChanges.xml" />
      <then>
        <property name="file.undeploy.destructive-changes" location="undeploy/destructiveChanges.xml" />
      </then>
      <elseif>
        <available file="undeploy/destructiveChangesPre.xml" />
        <then>
          <property name="file.undeploy.destructive-changes" location="undeploy/destructiveChangesPre.xml" />
        </then>
      </elseif>
      <else>
        <available file="undeploy/destructiveChangesPost.xml" />
        <then>
          <property name="file.undeploy.destructive-changes" location="undeploy/destructiveChangesPost.xml" />
        </then>
      </else>
    </if>
  </target>

  <!-- TODO -->
  <target name="-checkForStaticResources" >
    <loadfile srcFile="${file.deploy.pkg}" property="value.staticresources.available" >
      <filterchain>
        <linecontainsregexp>
          <regexp pattern=".+&lt;name&gt;StaticResource&lt;\/name&gt;" />
        </linecontainsregexp>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
          <containsregex pattern="^$" replace="TRUE" />
        </tokenfilter>
      </filterchain>
    </loadfile>
    <echo>${value.staticresources.available}</echo>
  </target>

  <!-- TODO -->
  <target name="-setStaticResources" depends="-checkForStaticResources" >
    <loadfile srcFile="${file.deploy.pkg}" property="value.staticresources.types" >
      <filterchain>
        <tokenfilter>
          <filetokenizer />
            <replaceregex pattern="\n|\r" replace="" flags="g" />
        </tokenfilter>
      </filterchain>
      <!-- <scriptfilter language="javascript" > -->
      <!--   var token = self.getToken(); -->
      <!--   self.setToken("&lt;types&gt;"); -->
      <!-- </scriptfilter> -->
    </loadfile>
    <for list="${value.staticresources.types}" delimiter="&lt;types&gt;" param="type" >
      <sequential>
        <property name="value.staticresources.members" value="@{type}" />
        <!-- <condition property="value.staticresources.members" value="@{type}" > -->
        <!--   <contains string="@{type}" substring="StaticResource" /> -->
        <!-- </condition> -->
      </sequential>
    </for>
    <echo>${value.staticresources.types}</echo>
    <echo>${value.staticresources.members}</echo>
  </target>

  <!-- TODO -->
  <target name="static" >
    <antcall target="-setStaticResources" />
    <echoproperties destfile="testing.log" >
      <propertyset>
        <propertyref prefix="value." />
      </propertyset>
    </echoproperties>
  </target>

  <target name="help" description="List properties and targets" depends="-init" >
    <antcall target="-printproperties" />
  </target>

  <target name="-logproperties" >
    <touch file="${dir.logs}/my.properties" mkdirs="true" />
    <echoproperties destfile="${dir.logs}/my.properties" >
      <propertyset>
        <propertyref prefix="sf." />
        <propertyref prefix="server." />
        <propertyref prefix="value." />
        <propertyref prefix="file." />
        <propertyref prefix="lib." />
      </propertyset>
    </echoproperties>
  </target>

  <target name="-printproperties" depends="-logproperties" >
    <loadfile property="myproperties" srcFile="${dir.logs}/my.properties" />
    <echo>${myproperties}</echo>
  </target>

  <macrodef name="getRequestId" >
    <attribute name="srcFile" /><!-- ${dir.logs}/deploylog.txt -->
    <sequential>
      <loadfile srcFile="@{srcFile}" property="dev.deploy.requestId" >
        <filterchain>
          <tailfilter lines="1" />
          <tokenfilter>
            <stringtokenizer suppressdelims="true" />
            <containsregex pattern="[a-zA-Z0-9]{18}" />
          </tokenfilter>
        </filterchain>
      </loadfile>
    </sequential>
  </macrodef>

  <target name="-logRequestId" >
    <getRequestId srcFile="${dir.logs}/deploylog.txt" />
  <echo file="${dir.logs}/request-ids.txt" append="true"
    message="${line.separator}${tstamp}: ${dev.deploy.root}=>${dev.deploy.serverurl}  ${dev.deploy.requestId}" />
</target>

  <target name="-setDeployServerurl" >
    <loadfile srcFile="${dir.logs}/request-ids.txt" property="dev.deploy.serverurl" >
      <filterchain>
        <tailfilter lines="1" />
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
          <containsregex pattern="\=\>" />
        </tokenfilter>
        <tokenfilter>
          <stringtokenizer suppressdelims="true" />
          <containsregex pattern=".+\=\>(\S+)" replace="\1" />
        </tokenfilter>
      </filterchain>
    </loadfile>
  </target>

  <target name="-filterAllDeployDirs" depends="-getDeployMetadata" >
    <mkdir dir="${dir.tmp.deploy}" />
    <move todir="${dir.tmp.deploy}" preservelastmodified="true" >
      <fileset dir="${dir.deploy}">
        <exclude name="*.xml"/>
      </fileset>
    </move>
    <foreach target="-filterDeployDir" list="${list.deploy.metadata}" delimiter="${line.separator}" param="tmp.deploy.metadata" />
  </target>

  <target name="-getDeployMetadata" >
    <mkdir dir="${dir.tmp}" />
    <loadfile srcfile="${file.deploy.pkg}" property="list.deploy.metadata" >
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="&lt;name&gt;.+&lt;/name&gt;" />
        </linecontainsregexp>
        <tokenfilter>
          <linetokenizer />
          <trim />
          <replacestring from="&lt;name&gt;" to="" />
          <replacestring from="&lt;/name&gt;" to="" />
        </tokenfilter>
      </filterchain>
    </loadfile>
  </target>

  <target name="-filterDeployDir" >
    <filterByPkgName metadata="${tmp.deploy.metadata}" pkgName="StaticResource" dirName="staticresources" dir="${dir.deploy}" tmp="${dir.tmp.deploy}" />
    <filterByPkgName metadata="${tmp.deploy.metadata}" pkgName="AuraDefinitionBundle" dirName="aura" dir="${dir.deploy}" tmp="${dir.tmp.deploy}" />
    <filterByPkgName metadata="${tmp.deploy.metadata}" pkgName="ApexPage" dirName="pages" dir="${dir.deploy}" tmp="${dir.tmp.deploy}" />
  </target>

  <macrodef name="filterByPkgName" >
    <attribute name="metadata" />
    <attribute name="pkgName" />
    <attribute name="dirName" />
    <attribute name="dir" />
    <attribute name="tmp" />
    <sequential>
      <if>
        <equals arg1="@{metadata}" arg2="@{pkgName}" />
        <then>
          <move file="@{tmp}/@{dirName}" todir="@{dir}" preservelastmodified="true" verbose="true" />
        </then>
      </if>
    </sequential>
  </macrodef>

  <target name="-resetDeployDir" >
    <move todir="${dir.deploy}" failonerror="false" >
      <fileset dir="${dir.tmp.deploy}" includes="**/*"></fileset>
    </move>
    <delete dir="${dir.tmp}" />
  </target>

  <target name="clean" description="Destroy all generated files and dirs" >
    <delete includeemptydirs="true" >
      <fileset dir="." includes="**/.ant-targets-build.xml" />
      <fileset dir="." includes="backup*/*" erroronmissingdir="false" />
      <fileset dir="${dir.retrieve}" excludes="*.xml" erroronmissingdir="false" />
      <fileset dir="${dir.undeploy}" excludes="*.xml" erroronmissingdir="false" />
      <fileset dir="${dir.logs}" erroronmissingdir="false" />
    </delete>
    <deleteEmptyDirectories dir="." />
    <deleteEmptyDirectories dir="${dir.retrieve}" />
    <deleteEmptyDirectories dir="${dir.undeploy}" />
  </target>

  <macrodef name="deleteEmptyDirectories" >
    <attribute name="dir" />
      <sequential>
          <delete includeemptydirs="true" >
            <fileset dir="@{dir}"  >
                  <and>
                      <size value="0" />
                      <type type="dir" />
                  </and>
              </fileset>
          </delete>
      </sequential>
  </macrodef>

  <target name="-describeMetadata" >
    <touch file="${dir.logs}/describe-${server.org}.log" mkdirs="true" />
    <sf:describeMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${server.url}"
      resultFilePath="${dir.logs}/describe-${server.org}.log" />
  </target>

  <target name="-listMetadata" >
    <touch file="${dir.logs}/list-${server.org}.log" mkdirs="true" />
    <sf:listMetadata username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${server.url}"
      resultFilePath="${dir.logs}/list-${server.org}.log" metadataType="${value.metadataType}" />
  </target>

  <macrodef name="retrieve" >
    <attribute name="retrieveTargetBase" />
    <attribute name="pkg" />
    <sequential>
      <mkdir dir="@{retrieveTargetBase}/${server.org}-${tstamp}" />
      <sf:retrieve username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${server.url}"
        maxPoll="${server.maxPoll}" retrieveTarget="@{retrieveTargetBase}/${server.org}-${tstamp}" unpackaged="@{pkg}" />
    </sequential>
  </macrodef>

  <!-- TODO: -filterAllDeployDirs does not at this moment filter members, it only handles  the wildcard * -->
  <macrodef name="deploy" >
    <attribute name="deployRoot" />
    <attribute name="pkg" />
    <sequential>
      <trycatch>
        <try>
          <antcall target="-filterAllDeployDirs" />
          <record name="${dir.logs}/deploylog.txt" action="start" />
          <sf:deploy username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${server.url}"
            maxPoll="${server.maxPoll}" deployRoot="@{deployRoot}" rollbackOnError="true" ignoreWarnings="false" />
          <record name="${dir.logs}/deploylog.txt" action="stop" />
          <property name="dev.deploy.serverurl" value="@{serverurl}" />
          <property name="dev.deploy.root" value="@{deployRoot}" />
          <antcall target="-logRequestId" />
        </try>
        <finally>
          <antcall target="-resetDeployDir" />
        </finally>
      </trycatch>
    </sequential>
  </macrodef>

  <macrodef name="cancelDeploy" >
    <sequential>
      <getRequestId srcFile="${dir.logs}/request-ids.txt" />
      <antcall target="-setDeployServerurl" />
      <sf:cancelDeploy  username="${sf.username}" password="${sf.password}" sessionId="${sf.sessionId}" serverurl="${dev.deploy.serverurl}"
        maxPoll="${server.maxPoll}" requestId="${dev.deploy.requestId}" />
    </sequential>
  </macrodef>

  <target name="describeSandboxMetadata" depends="-init" description="" >
    <antcall target="-describeMetadata" />
  </target>

  <target name="describeProductionMetadata" depends="-init" description="" >
    <antcall target="-describeMetadata" />
  </target>

  <target name="listSandboxMetadata" depends="-init" description="Retrieve information on all items of a particular metadatatype" >
    <antcall target="-listMetadata" />
  </target>

  <target name="listProductionMetadata" depends="-init" description="" >
    <antcall target="-listMetadata" />
  </target>

  <target name="retrieveSandbox" depends="-init" description="" >
    <retrieve retrieveTargetBase="${dir.retrieve}" pkg="${file.retrieve.pkg}" />
  </target>

  <target name="retrieveProduction" depends="-init" description="" >
    <retrieve retrieveTargetBase="${dir.retrieve}" pkg="${file.retrieve.pkg}" />
  </target>

  <target name="deployToSandbox" depends="-init" description="" >
    <deploy deployRoot="${dir.deploy}" pkg="${file.deploy.pkg}" />
  </target>

  <target name="deployToProduction" depends="-init" description="" >
    <retrieve retrieveTargetBase="backup-deployToProduction-${tstamp}" pkg="${file.deploy.pkg}" />
    <deploy deployRoot="${dir.deploy}" pkg="${file.deploy.pkg}" />
  </target>

  <target name="undeployFromSandbox" depends="-init,-setDestructiveChangesXml" description="" >
    <retrieve retrieveTargetBase="${dir.undeploy}/undeployFromSandbox-${tstamp}" pkg="${file.undeploy.destructive-changes}" />
    <deploy deployRoot="${dir.undeploy}" pkg="${file.undeploy.pkg}" />
  </target>

  <target name="undeployFromProduction" depends="-init,-setDestructiveChangesXml" description="" >
    <retrieve retrieveTargetBase="${dir}/undeployFromProduction-${tstamp}" pkg="${file.undeploy.destructive-changes}" />
    <deploy deployRoot="${dir.undeploy}" pkg="${file.undeploy.pkg}" />
  </target>

  <target name="cancelLastDeploy" depends="-init" description="" >
    <cancelDeploy />
  </target>

</project>
