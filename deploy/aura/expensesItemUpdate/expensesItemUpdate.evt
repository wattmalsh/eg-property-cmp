<!-- events in Lightning Components -->
<!-- 
Enable component to send an event
  1. create a custom event by creating a Lightning Event, giving it a name (filename) and attributes
  2. register your component to send these events, by choosing a custom event type and giving this specific use of that type a name
  3. fire the event in your controller (or helper) code by:
    using component.getEvent() to create a specific event instance
    sending the event with fire()
-->
<!--
Enable component to receive and handle events
  1. define a custom event (same as 1 above)
  2. register the component to handle the event (aura:handler). this maps the event to an action handler
  3. actually handle the event in an action handler
-->

<!-- expensesItemUpdate.evt --> <!-- the event is named by the filename -->
<aura:event type="COMPONENT"> <!-- there are two types of events: COMPONENT and APPLICATION. a component event is where we want an ancestor ("above" the component in the hierarchy) component to catch and handle the event. use an application event for any component to receive the event -->
  <aura:attribute name="expense" type="Expense__c"/> <!-- an event's attribute describes the payload it can carry, the payload is set by the action handler with a call to setParams() -->
</aura:event>
