<apex:page showHeader="false">
  <html>
    <head>
      <style>
        html { height: 100%; }
        body { height: 100%; margin: 0; padding: 0 }
        #map { height: 100%; }
      </style>
    </head>
    <body>
      <div id="map"/>
      <!-- note defer="true" sets the script to load after the doc has been parsed but before firing DOMContentLoaded. Synchronous JS (in this case the custom script) pauses parsing of the DOM. -->
      <script src="https://maps.googleapis.com/maps/api/js?callback=initMap" async="true" defer="true"></script>
      <script>

        let lexOrigin = 'https://{!$Currentpage.parameters.lcHost}'; // the origin (protocol + port + host)

        let mapEl = document.getElementById('map'),
            mapCenter = { lat: 43.646335, lng: -79.530037 }; // arbitrary initial map center in Toronto

        // attr are values that are in sync with LC
        let attr = {};
        attr.lead = {}; // { name: '', latLng: { lat: 0, lng: 0 }, address: '' }
        attr.marker = {}; // { latLng: { lat: 0, lng: 0 }, address: '' }
        attr.layers = []; // [ { btnName: '', displayName: '', active: '' }, {...}, {...} ]

        // google map api variables
        let map,
            marker,
            markerInfoWindow,
            geocoder,
            kmlLayers;

        let mapOptions = {
          zoom: 20,
          gestureHandling: 'greedy',
          mapTypeId: google.maps.MapTypeId.HYBRID,
          mapTypeControl: true,
          mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
            position: google.maps.ControlPosition.TOP_CENTER
          },
          zoomControl: true,
          zoomControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER
          },
          scaleControl: true,
          streetViewControl: true,
          streetViewControlOptions: {
            position: google.maps.ControlPosition.LEFT_BOTTOM
          },
          fullscreenControl: true
        };

        function sendToLC(message) {
          parent.postMessage(message, lexOrigin);
        }

        // handle record response from LC
        window.addEventListener("message", function(event) {

          if (event.origin !== lexOrigin) {
            return;
          }

          if (event.data.name === "initResponse") {
            // handle lead record
            attr.lead = event.data.record.lead;
            map.setCenter(event.data.record.lead.latLng);
            initMarker(event.data.record.lead);
            // check for lead record / google map discrepancies
            if (attr.lead.address !== geocodeLatLng(attr.lead.latLng)) {
              //TODO: alert that addresses don't match up and ask user to remedy
            }
            // handle kml layers
            attr.layers = event.data.record.layers;
            createLayerReferences(attr.layers);
          }

          if (event.data.name === "recordUpdateSuccess") {
            //TODO: use CSS to notify user record successfully updated in database
          }

          if (event.data.name === "kmlUpdate") {
            attr.layers = event.data.record.layers;
            toggleLayers(attr.layers);
          }

        }, false);

        function initMap() {

          // send to LC, google api loaded and DOMContentLoaded event fired so ready to receive record
          sendToLC("init");

          // load a blank map
          map = new google.maps.Map(mapEl, mapOptions);
          map.setCenter( mapCenter );

        }

        function initMarker() {

          marker = new google.maps.Marker({
            position: lead.latLng,
            map: map,
            draggable: true,
            title: lead.name
          });

          markerInfoWindow = new google.maps.InfoWindow({
            content: `
            <div class="popup">
            <p>${attr.lead.name}</p>
            <p>${attr.lead.address}</p>
            </div>`
          });

          // marker and markerInfoWindow event listeners
          marker.addListener('click', function() {
            markerInfoWindow.open(map, marker);
          });

          marker.addListener('dragend', function() {
            let latLng = marker.getPosition();
            attr.marker = { latLng: latLng, address: geocodeLatLng(latLng) };
            sendToLC(JSON.stringify(attr.marker));
          });

          markerInfoWindow.addListener('closeclick', function() {
            map.setCenter(marker.getPosition());
          });

        }

        // return the closest human-readable address from latLng
        function geocodeLatLng(latLng) {
          if ( typeof geocoder === 'undefined' ) {
            geocoder = new google.maps.Geocoder();
          }
          geocoder.geocode({ location: latLng }, function(results, status) {
            if ( status === 'OK' ) {
              return results[0].formatted_address;
            } else {
              const fail = 'Cannot determine an address at this location';
              //TODO: handle geocoder error
            }
          });
        }

        function createLayerReferences(layers) {
          for ( let i=0; i<layers.length; i++ ) {
            kmlLayers[i] = new google.maps.KmlLayer({
              url: layers[i].url,
              map: map,
              preserveViewport: true,
              suppressInfoWindows: true
            });
          }
        }

        function toggleLayers(layers) {
          for ( let i=0; i<layers.length; i++ ) {
            layers[i].active ? kmlLayers[i].setMap(map) : kmlLayers[i].setMap(null);
          }
        }

      </script>
    </body>
  </html>
</apex:page>
