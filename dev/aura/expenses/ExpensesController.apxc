<!-- ExpensesController.apxc -->
public with sharing class ExpensesController { // 'with sharing' is an essential security measure that automatically applies your org's sharing rules to the records that are available via these methods

  @AuraEnabled // make this available to Lighning Components, Aura is the name of the open source framework at the core of Lightning Components
  // @AuraEnabled methods must be static methods, and either public or global scope
  public static List<Expense__c> getExpenses() {
    String[] expenseAccessFields = new String[] { 'Id',
                                            'Name',
                                            'Amount__c',
                                            'Client__c',
                                            'Date__c',
                                            'Reimbursed__c',
                                            'CreatedDate'
                                            };
    // Obtain the field name/token map for the Expense object
    Map<String,Schema.SObjectField> m = Schema.SObjectType.Expense__c.fields.getMap();
    for(String field : expenseAccessFields) {
      // check if the user has access to view field
      if ( ! m.get(field).getDescribe().isAccessible()) { // describe calls are expensive. if your app calls this method frequently, find a way to optimize or cache your access checks per user
        // pass error to client
        throw new System.NoAccessException();
        // suppress editor logs
        return null;
      }
    }
    // query the object safely
    return [SELECT Id, Name, Amount__c, Client__c, Date__c, Reimbursed__c, CreatedDate FROM Expense__c];
  }

  @AuraEnabled
  public static Expense__c saveExpense(Expense__c expense) {
    // Perform isUpdatable() checking first
    String[] expenseAccessFields = new String[] { 'Id',
                                                  'Name',
                                                  'Amount__c',
                                                  'Client__c',
                                                  'Date__c',
                                                  'Reimbursed__c',
                                                  };
    Map<String,Schema.SObjectField> m = Schema.SObjectType.Expense__c.fields.getMap();
    for(String expense : expenseAccessFields) {
      if ( ! m.get(field).getDescribe().isUpdatable()) {
        throw new System.NoAccessException();
        return null;
      }
    }
    upsert expense;
    return expense;
  }
}
